.PHONY: clean
clean: clean-latest clean-version clean-snapshot clean-alpha clean-beta clean-build

.PHONY: compile
compile: compile-lib compile-bin compile-res compile-app

.PHONY: build
build: compile copy-others copy-dist

.PHONY: watch
watch: watch-src

.PHONY: test
test: clean compile unit-tests

.PHONY: e2e
e2e: clean build e2e-tests

#######################################################################
## Tasks
##
VERSION := $(shell cat VERSION)

.PHONY: clean-build
clean-build:
	(rm -rf ./build/)

.PHONY: clean-latest
clean-latest:
	(rm -rf ./dist/latest/)

.PHONY: clean-snapshot
clean-snapshot:
	(rm -rf ./dist/${VERSION}-SNAPSHOT/)

.PHONY: clean-alpha
clean-alpha:
	(rm -rf ./dist/${VERSION}a/)

.PHONY: clean-beta
clean-beta:
	(rm -rf ./dist/${VERSION}b/)

.PHONY: clean-version
clean-version:
	(rm -rf ./dist/${VERSION}/)

.PHONY: copy-others
copy-others:
	((cp ./LICENSE ./build/) && \
	 (cp ./src/main/resources/README.txt ./build/) && \
	 (cp ./VERSION ./build/))

.PHONY: copy-dist
copy-dist:
	((mkdir -p dist/) && \
	 (cp -r ./build/ ./dist/${VERSION}/) && \
	 (cp -r ./build/ ./dist/latest/))

.PHONY: compile-lib
compile-lib:
	((rm -rf ./build/lib/) && \
	 (mkdir -p ./build/lib/) && \
	 (cp ./lib/ldu-devops-compiler/ldu-devops-compiler-1.0.0b.sh ./build/compiler.sh) && \
	 (chmod 755 ./build/compiler.sh) && \
	 (cp ./lib/ldu-devops-logger/ldu-devops-logger-1.0.0b.sh ./build/lib/logger.sh) && \
	 (chmod 755 ./build/lib/logger.sh))

.PHONY: compile-bin
compile-bin:
	((rm -rf ./build/tmp/bin/) && \
	 (mkdir -p ./build/tmp/bin/) && \
	 (find ./src/main/sh/app/commands/ -name '*.sh' -exec cp "{}" ./build/tmp/bin/ \;) && \
	 (find ./src/main/sh/app/tasks/ -name '*.sh' -exec cp "{}" ./build/tmp/bin/ \;) && \
	 (find ./src/main/sh/ -name 'main.sh' -exec cp "{}" ./build/tmp/bin/ \;))

.PHONY: compile-res
compile-res:
	((rm -rf ./build/res/) && \
	 (mkdir -p ./build/res/) && \
	 (rm -rf ./build/tmp/resources/) && \
	 (mkdir -p ./build/tmp/resources/) && \
	 (find ./src/main/resources/ -name 'docker-compose.*.env' -exec cp "{}" ./build/tmp/resources/ \;) && \
	 (find ./src/main/resources/ -name 'docker-compose.*.yml' -exec cp "{}" ./build/tmp/resources/ \;) && \
	 (find ./src/main/resources/ -name 'default-environment.ini' -exec cp "{}" ./build/tmp/resources/ \;))

.PHONY: compile-app
compile-app:
	((./build/compiler.sh) && \
	 (chmod 755 ./build/make.sh) && \
	 (rm -rf ./build/tmp/) && \
	 (rm -rf ./build/compiler.sh))

.PHONY: watch-src
watch-src:
	((echo Watching sources folder...) && \
	 (while inotifywait -q -r -e modify,move,create,delete ./src/ >/dev/null; do make compile --silent; done;))

.PHONY: unit-tests
unit-tests:
	((chmod -R 755 ./src/test/sh/unit/*.sh) && \
	 (/bin/bash ./src/test/sh/unit/run-all.sh ${test} ${args}))

.PHONY: e2e-tests
e2e-tests:
	((chmod -R 755 ./src/test/sh/integration/*.sh) && \
	 (/bin/bash ./src/test/sh/integration/run-all.sh ${test} ${args}))

#######################################################################
## Release

.PHONY: release
release:
	((make clean build) && \
	 (git add VERSION && git commit -m "RELEASE: Version bumped to v${VERSION}") && \
	 (git add CHANGELOG.md && git commit -m "CHORE: Autogenerated CHANGELOG for v${VERSION}") && \
	 (git add --all dist/* && git commit -m "CHORE: Autogenerated DIST files for v${VERSION}") && \
	 (git-flow release finish ${VERSION}) && \
	 (git push --all && git push --tags))
